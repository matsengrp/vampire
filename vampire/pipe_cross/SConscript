"""
In this SConscript we compute quantities in (model, data) combinations.
"""

import os
import glob
from os.path import join

import nestly
import nestly.scons as ns
import SCons.Script as sc

import common
from common import cjoin

sc.Import('env')
localenv = env.Clone()  # noqa


input_pipe = 'pipe_main'
which_model = '35/100'

# ### Nests and targets ###

nest = ns.SConsWrap(nestly.Nest(), alias_environment=localenv)

# We assume that the input comes from input_pipe, and that there is a
# input_pipe directory just above us in the directory hierarchy.
parent_dir = os.path.dirname(os.getcwd())
# According to our convention, we also assume that the input_pipe
# directory has a output directory labeled by the data label.
inputs_dir = cjoin(parent_dir, input_pipe, '_output_'+localenv['data_label'])

# Add a nest that adds a directory according to the input dir.
nest.add('inputs_dir', [inputs_dir], label_func=common.path_split_tail)

# These are the directories from which we will find models and processed data.
dirs_with_inputs = glob.glob(join(inputs_dir, '*/'))

# Add a nest representing the model we will use.
nest.add('model', dirs_with_inputs, label_func=common.path_split_tail)

# # Add a nest representing what we will run on.
nest.add('run_on', dirs_with_inputs, label_func=lambda p: common.path_split_tail(p))

# If we wanted to exclude the current one we would do this:
# nest.add('run_on', lambda c: [d for d in dirs_with_inputs(c) if d != c['model']], label_func=os.path.basename)


@nest.add_target_with_env(localenv)
def loss(env, outdir, c):
    specific_model = cjoin(c['model'], which_model)
    data_paths = {
            k: glob.glob(join(inputs_dir, common.path_split_tail(c['run_on']), f'*{k}.csv'))[0]
            for k in ['train', 'test']}
    sources = [
            join(specific_model, 'model_params.json'),
            join(specific_model, 'best_weights.h5'),
            data_paths['train'],
            data_paths['test']
            ]
    return env.Command(
        join(outdir, join(common.strip_dirpath_extn(c['run_on']), 'loss.csv')),
        sources,
        'python3 tcr_vae.py loss $SOURCES $TARGET')
