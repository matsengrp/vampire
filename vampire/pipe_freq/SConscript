"""
In this SConscript we do frequency estimation benchmarking.
"""

from os.path import join

import nestly
import nestly.scons as ns
import SCons.Script as sc

from common import cluster_execution_string

sc.Import('env')
localenv = env.Clone()  # noqa

DATA = '../_ignore/mini.subject_subsampled.csv.bz2'


def base_dict():
    """
    The dictionary that will be shared by all the nests.
    """

    if localenv['mode'] == 'mini':
        d = {
            'training_row_fraction': 0.5,
            'nn_training_set_size': 2000,
            'evaluation_size': 100,
            'model_params': 'mini_params.json',
        }
    else:
        d = {
            'training_row_fraction': 0.5,
            'nn_training_set_size': 200000,
            'evaluation_size': 10000,
            'model_params': 'basic_params.json',
        }

    return d


# ### Nests and targets ###

nest = ns.SConsWrap(nestly.Nest(base_dict=base_dict()), dest_dir='_output', alias_environment=localenv)


@nest.add_target_with_env(localenv, 'split')
@ns.name_targets
def split_rows(env, outdir, c):
    """
    Split the sequences into training and test.
    """
    prefix = 'subject_subsampled'
    return 'train', 'test', env.Command(
        [join(outdir, prefix + '.train.csv.bz2'),
         join(outdir, prefix + '.test.csv.bz2')],
        DATA,
        f"python3 util.py split-rows --train-size {c['training_row_fraction']} $SOURCE $TARGETS")


@nest.add_target_with_env(localenv)
def training_sequences(env, outdir, c):
    """
    Sample sequences for training.
    """
    return env.Command(
        join(outdir, 'training-sequences.csv'),
        c['split']['train'],
        f"python util.py sample-data-set --n-to-sample {c['nn_training_set_size']} $SOURCE $TARGET")


@nest.add_target_with_env(localenv, 'trained')
@ns.name_targets
def trained(env, outdir, c):
    return 'weights', 'diagnostics', env.Command(
        [join(outdir, 'best_weights.h5'), join(outdir, 'diagnostics.csv')],
        [c['model_params'], c['training_sequences']],
        cluster_execution_string('tcr-vae train {sources} {targets}', localenv))


@nest.add_target_with_env(localenv)
def evaluation_sequences_from_train(env, outdir, c):
    """
    Sample sequences for evaluation from the training rows.
    """
    return env.Command(
        join(outdir, 'evaluation-sequences-from-train.csv'),
        c['split']['train'],
        f"python util.py sample-data-set --n-to-sample {c['evaluation_size']} $SOURCE $TARGET")


@nest.add_target_with_env(localenv)
def evaluation_sequences_from_test(env, outdir, c):
    """
    Sample sequences for evaluation from the testing rows.
    """
    return env.Command(
        join(outdir, 'evaluation-sequences-from-test.csv'),
        c['split']['test'],
        f"python util.py sample-data-set --n-to-sample {c['evaluation_size']} $SOURCE $TARGET")


@nest.add_target_with_env(localenv)
def pvae_train(env, outdir, c):
    return env.Command(
        join(outdir, 'evaluation_sequences_from_train.pvae.csv'),
        [c['model_params'], c['trained']['weights'], c['evaluation_sequences_from_train']],
        cluster_execution_string('tcr-vae pvae {sources} {targets}', localenv))[0]


@nest.add_target_with_env(localenv)
def pvae_test(env, outdir, c):
    return env.Command(
        join(outdir, 'evaluation_sequences_from_test.pvae.csv'),
        [c['model_params'], c['trained']['weights'], c['evaluation_sequences_from_test']],
        cluster_execution_string('tcr-vae pvae {sources} {targets}', localenv))[0]
