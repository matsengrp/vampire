"""
In this SConscript we do frequency estimation benchmarking.
"""

import json

from os.path import join

import nestly
import nestly.scons as ns
import SCons.Script as sc

import tcr_vae

from common import cluster_execution_string

sc.Import('env')
localenv = env.Clone()  # noqa

DATA = '/home/matsen/re/vampire-analysis-1/output/hansen666.subject_subsampled.csv.bz2'


def default_params_by_mode():
    """
    Mini mode doesn't train for long.
    """
    params = tcr_vae.TCRVAE.default_params()

    if localenv['mode'] == 'mini':
        params['pretrains'] = 2
        params['warmup_period'] = 3
        params['epochs'] = 10

    return params


def base_dict():
    """
    The dictionary that will be shared by all the nests.
    """

    if localenv['mode'] == 'mini':
        d = {
            'training_row_fraction': 0.5,
            'nn_training_set_size': 2000,
            'evaluation_size': 100,
        }
    else:
        d = {
            'training_row_fraction': 0.5,
            'nn_training_set_size': 200000,
            'evaluation_size': 10000,
        }

    # Shared options
    d['max_q'] = 100

    return d


# ### Nests and targets ###

nest = ns.SConsWrap(nestly.Nest(base_dict=base_dict()), dest_dir='_output', alias_environment=localenv)

summarized_agg_names = []
nest.add_aggregate('merged_agg', list)


@nest.add_target_with_env(localenv, 'split')
@ns.name_targets
def split_rows(env, outdir, c):
    """
    Split the sequences into training and test.
    """
    prefix = 'subject_subsampled'
    return 'train', 'test', env.Command(
        [join(outdir, prefix + '.train.csv.bz2'),
         join(outdir, prefix + '.test.csv.bz2')],
        DATA,
        f"python3 util.py split-rows --train-size {c['training_row_fraction']} $SOURCE $TARGETS")


summarized_agg_names.append('column')
nest.add('column', 'count,count_in_16,count_in_32,count_in_64,count_in_128,count_in_256'.split(','))


@nest.add_target_with_env(localenv)
def training_sequences(env, outdir, c):
    """
    Sample sequences for training.
    """
    return env.Command(
        join(outdir, 'training-sequences.csv'),
        c['split']['train'],
        f"python util.py sample-data-set --column {c['column']} "
        f"--n-to-sample {c['nn_training_set_size']} $SOURCE $TARGET")


nest.add('model', ['basic', 'count_match'])
summarized_agg_names.append('model')


@nest.add_target_with_env(localenv)
def model_params(env, outdir, c):
    """
    Write out a file with parameters from which we can build our VAE.
    """

    # Copy over any relevant parameters from c into the params dictionary.
    params = default_params_by_mode()
    for k, v in c.items():
        if k in params:
            params[k] = v

    return env.Command(
        join(outdir, 'model_params.json'),
        [],
        f"echo '{json.dumps(params)}' > $TARGET")[0]


@nest.add_target_with_env(localenv, 'trained')
@ns.name_targets
def trained(env, outdir, c):
    return 'weights', 'diagnostics', env.Command(
        [join(outdir, 'best_weights.h5'), join(outdir, 'diagnostics.csv')],
        [c['model_params'], c['training_sequences']],
        cluster_execution_string('tcr-vae train {sources} {targets}', localenv))


@nest.add_target_with_env(localenv)
def training_olga_tsv(env, outdir, c):
    """
    Get Pgen for the training data.
    """
    return env.Command(
        join(outdir, 'training-sequences.olga.tsv'),
        c['training_sequences'],
        'gene-name-conversion adaptive2olga $SOURCE $TARGET')[0]


@nest.add_target_with_env(localenv)
def q_csv(env, outdir, c):
    """
    Calculate values for the thymic Q.
    """
    return env.Command(
        join(outdir, 'q.tsv'),
        c['training_olga_tsv'],
        f"python3 thymic_Q.py q --max-q {c['max_q']} data/thymic-Q/model-lvj-frequency.csv.bz2 $SOURCE $TARGET")[0]


@nest.add_target_with_env(localenv)
def evaluation_sequences_from_train(env, outdir, c):
    """
    Sample sequences for evaluation from the training rows.
    """
    return env.Command(
        join(outdir, 'evaluation-sequences-from-train.csv'),
        c['split']['train'],
        f"python util.py sample-data-set --column {c['column']} "
        f"--n-to-sample {c['evaluation_size']} --include-freq $SOURCE $TARGET")[0]


@nest.add_target_with_env(localenv)
def evaluation_sequences_from_test(env, outdir, c):
    """
    Sample sequences for evaluation from the testing rows.
    """
    return env.Command(
        join(outdir, 'evaluation-sequences-from-test.csv'),
        c['split']['test'],
        f"python util.py sample-data-set --column {c['column']} --n-to-sample {c['evaluation_size']} "
        f"--include-freq $SOURCE $TARGET")[0]


@nest.add_target_with_env(localenv)
def pvae_train(env, outdir, c):
    return env.Command(
        join(outdir, 'evaluation_sequences_from_train.pvae.csv'),
        [c['model_params'], c['trained']['weights'], c['evaluation_sequences_from_train']],
        cluster_execution_string('tcr-vae pvae {sources} {targets}', localenv))[0]


@nest.add_target_with_env(localenv)
def pvae_test(env, outdir, c):
    return env.Command(
        join(outdir, 'evaluation_sequences_from_test.pvae.csv'),
        [c['model_params'], c['trained']['weights'], c['evaluation_sequences_from_test']],
        cluster_execution_string('tcr-vae pvae {sources} {targets}', localenv))[0]


@nest.add_target_with_env(localenv)
def pgen_train(env, outdir, c):
    return env.Command(
        join(outdir, 'evaluation_sequences_from_train.pgen.csv'),
        c['evaluation_sequences_from_train'],
        cluster_execution_string('adaptive-pgen.sh {sources} {targets}', localenv, 0))[0]


@nest.add_target_with_env(localenv)
def pgen_test(env, outdir, c):
    return env.Command(
        join(outdir, 'evaluation_sequences_from_test.pgen.csv'),
        c['evaluation_sequences_from_test'],
        cluster_execution_string('adaptive-pgen.sh {sources} {targets}', localenv, 0))[0]


@nest.add_target_with_env(localenv)
def ppost_train(env, outdir, c):
    return env.Command(
        join(outdir, 'evaluation_sequences_from_train.ppost.csv'),
        [c['q_csv'], c['pgen_train']],
        'python3 thymic_Q.py ppost $SOURCES $TARGET')[0]


@nest.add_target_with_env(localenv)
def ppost_test(env, outdir, c):
    return env.Command(
        join(outdir, 'evaluation_sequences_from_test.ppost.csv'),
        [c['q_csv'], c['pgen_test']],
        'python3 thymic_Q.py ppost $SOURCES $TARGET')[0]


# These next two things are handy for outputting where we are in the nest.
idx_name = ';'.join(summarized_agg_names)


def get_idx(c):
    """
    Return a semicolon-separated list of where we are in the nest.
    """
    return ';'.join([str(c[k]) for k in summarized_agg_names])


@nest.add_target_with_env(localenv)
def merged_ps_train(env, outdir, c):
    merged = join(outdir, 'merged_ps_train.csv')
    c['merged_agg'].append(merged)
    return env.Command(
        merged,
        [c['evaluation_sequences_from_train'], c['pvae_train'], c['ppost_train']],
        f'python3 util.py merge-ps --idx "{get_idx(c)};train" --idx-name "{idx_name};split" $SOURCES $TARGET')[0]


@nest.add_target_with_env(localenv)
def merged_ps_test(env, outdir, c):
    merged = join(outdir, 'merged_ps_test.csv')
    c['merged_agg'].append(merged)
    return env.Command(
        merged,
        [c['evaluation_sequences_from_test'], c['pvae_test'], c['ppost_test']],
        f'python3 util.py merge-ps --idx "{get_idx(c)};test" --idx-name "{idx_name};split" $SOURCES $TARGET')[0]


# Pop all the way back to the very beginning for a complete summary.
nest.pop(summarized_agg_names[0])


@nest.add_target_with_env(localenv)
def merged_agg_target(env, outdir, c):
    return env.Command(
        join(outdir, 'merged.agg.csv'),
        c['merged_agg'],
        'python3 util.py fancystack --out $TARGET $SOURCES')[0]


@nest.add_target_with_env(localenv)
def merged_agg_target_bz2(env, outdir, c):
    return env.Command(
        str(c['merged_agg_target'])+'.bz2',
        c['merged_agg_target'],
        'bzip2 $SOURCE')[0]
