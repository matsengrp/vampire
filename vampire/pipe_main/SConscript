from os.path import join
import glob
import json

import nestly
import nestly.scons as ns
import SCons.Script as sc

import common
import tcr_vae

sc.Import('env')
localenv = env.Clone()  # noqa

# ### Paths and data sets ###

data_path = '/fh/fast/matsen_e/data/'
seshadri_path = join(data_path, 'seshadri/data/Adaptive/clinical_cohort/')

DATA = {
    'test': {
        'paths': ['sample_data/02-0249_TCRB.4000.tsv.bz2']
    },
    'one-seshadri': {
        'paths': [join(seshadri_path, '02-0249_TCRB.tsv')]
    },
    'one-seshadri-tb': {
        'paths': [join(seshadri_path, 'TB-1052-2M_TCRB.tsv')]
    },
    'seshadri': {
        'paths': [join(seshadri_path, '02-0249_TCRB.tsv'),
                  join(seshadri_path, '09-0306_TCRB.tsv')]
    },
    'healthy-seshadri': {
        'paths': glob.glob(join(seshadri_path, '[01]*TCRB.tsv'))
    },
    'merged-healthy-seshadri': {
        'paths': ['/home/matsen/re/vampire/vampire/_ignore/all-seshadri-01-TCRB.tsv']
    }
}


# ### Mode-related ###

def check_mode():
    if localenv['mode'] not in ['mini', 'default']:
        raise Exception(f"Unknown mode '{localenv['mode']}'")


def apply_mode(l):
    """
    Default mode runs everything, and mini mode just runs a single element from the list.
    """
    check_mode()
    if localenv['mode'] == 'mini':
        return [l[0]]
    else:
        return l


def default_params_by_mode():
    """
    Mini mode doesn't train for long.
    """
    params = tcr_vae.TCRVAE.default_params()

    if localenv['mode'] == 'mini':
        params['epochs'] = 5

    return params


# ### Nests and targets ###

nest = ns.SConsWrap(nestly.Nest(), alias_environment=localenv)

# Nest: the data set choice, named via data name prepended with `_output_`.
nest.add('data_label', [localenv['data_label']], label_func=lambda p: '_output_' + p)

# Nest: the sample, named by sample name.
nest.add('sample', apply_mode(DATA[localenv['data_label']]['paths']), label_func=common.strip_dirpath_extn)


@nest.add_target_with_env(localenv)
def preprocess(env, outdir, c):
    """
    Run the preprocess_adaptive.py script.
    """
    in_path = c['sample']
    outfile, = env.Command(
        join(outdir, common.strip_dirpath_extn(in_path) + '.processed.csv'),
        in_path,
        'python3 preprocess_adaptive.py $SOURCE $TARGET')
    return outfile


@nest.add_target_with_env(localenv, 'split')
@ns.name_targets
def split(env, outdir, c):
    """
    Split the sample evenly into test and train.
    """
    in_path = c['preprocess']
    return 'train', 'test', env.Command([
        join(outdir, common.strip_dirpath_extn(in_path) + '.train.csv'),
        join(outdir, common.strip_dirpath_extn(in_path) + '.test.csv')],
        in_path,
        f"python3 util.py split --test-size {localenv['test_size']} $SOURCE $TARGETS")


def numerical_nest_add(nest_name, number_list):
    """
    Add an nest for a list of integers, with nice zero-padded directory names.
    """
    nest.add(nest_name, apply_mode(number_list), label_func=common.zero_pad_list_func(number_list))


# # Nest: the model.
# nest.add('model', apply_mode([common.strip_dirpath_extn(m) for m in glob.glob('../models/*.py')]))

# # Nest: the dimension of the latent space.
# numerical_nest_add('latent_dim', [30, 35, 40])

# # Nest: the number of dense nodes.
# numerical_nest_add('dense_nodes', [50, 100, 150, 200])

# # Nest: the amino acid embedding dimension.
# numerical_nest_add('aa_embedding_dim', [10, 15, 20, 21])

# # Nest: the V gene embedding dimension.
# numerical_nest_add('v_gene_embedding_dim', [20, 30, 40])

# Nest: the strength of the KL component of the VAE loss.
numerical_nest_add('beta', [2.**i for i in range(-3,6)])


@nest.add_target_with_env(localenv)
def model_params(env, outdir, c):
    """
    Write out a file with parameters from which we can build our VAE.
    """

    # Copy over any relevant parameters from c into the params dictionary.
    params = default_params_by_mode()
    for k, v in c.items():
        if k in params:
            params[k] = v

    return env.Command(
        join(outdir, 'model_params.json'),
        [],
        f"echo '{json.dumps(params)}' > $TARGET")


@nest.add_target_with_env(localenv, 'trained')
@ns.name_targets
def trained(env, outdir, c):
    to_execute = \
            "python3 execute.py --clusters='" + \
            localenv['clusters'] + \
            "' '$SOURCES' '$TARGETS' 'python3 tcr_vae.py train {sources} {targets}'"
    return 'weights', 'diagnostics', env.Command(
        [join(outdir, 'best_weights.h5'), join(outdir, 'diagnostics.csv')], [c['model_params'], c['split']['train']],
        to_execute)


@nest.add_target_with_env(localenv)
def loss(env, outdir, c):
    return env.Command(
        join(outdir, 'loss.csv'),
        [c['model_params'], c['trained']['weights'], c['split']['train'], c['split']['test']],
        'python3 tcr_vae.py loss $SOURCES $TARGET')


# @nest.add_target_with_env(localenv)
# def importance(env, outdir, c):
#     return env.Command(
#         join(outdir, 'importance.csv'),
#         [c['model_params'], c['trained']['weights'], c['split']['test']],
#         'python3 tcr_vae.py importance $SOURCES $TARGET')


@nest.add_target_with_env(localenv)
def generated(env, outdir, c):
    return env.Command(
        join(outdir, 'generated.csv'),
        [c['model_params'], c['trained']['weights']],
        'python3 tcr_vae.py generate --nseqs 500 $SOURCES $TARGET')[0]


@nest.add_target_with_env(localenv)
def pgen(env, outdir, c):
    return env.Command(
        common.strip_extn(c['generated'])+'.pgen.csv',
        c['generated'],
        'scripts/olga-pgen.sh $SOURCE $TARGET')
